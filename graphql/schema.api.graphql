schema {
  query: Query
  mutation: Mutation
  subscription: Subscription
}

# ignore for now; Query simply has to be present
type Query {
  getClub(clubId: String!): Club
    @aws_cognito_user_pools(
      cognito_groups: ["adminClub", "adminSuper", "clubDevice"]
    )

  listClubDevices(clubId: String!, nextToken: String, limit: Int = 50): ListClubDevicesOutput!
    @aws_cognito_user_pools(cognito_groups: ["adminClub", "adminSuper"])

  # I think ClubDevice could technically be null here...
  getClubDevice(clubId: String!, clubDeviceId: String!): ClubDevice!
    @aws_cognito_user_pools(
      cognito_groups: ["adminClub", "adminSuper", "clubDevice"]
    )

  listGames(clubId: String!, nextToken: String, limit: Int = 50): ListGamesOutput!
  @aws_cognito_user_pools(cognito_groups: ["adminClub", "adminSuper"])

  getGame(clubId: String!, gameId: String!): Game
  @aws_cognito_user_pools(
    cognito_groups: ["adminClub", "adminSuper", "clubDevice"]
  )
}
type Mutation {
  unexpectedError: UnexpectedErrorResponse!
    @aws_cognito_user_pools(cognito_groups: ["adminSuper"])

  createClub(input: CreateClubInput!): CreateClubResponse!
    @aws_api_key
    @aws_cognito_user_pools(cognito_groups: ["adminSuper"])

  updateClub(input: UpdateClubInput!): Club!
    @aws_cognito_user_pools(cognito_groups: ["adminSuper", "adminClub"])

  deleteClubAndAdmin(
    input: DeleteClubAndAdminInput!
  ): DeleteClubAndAdminResponse!
    @aws_cognito_user_pools(cognito_groups: ["adminClub", "adminSuper"])

  createClubDevice(input: CreateClubDeviceInput!): ClubDevice!
    @aws_cognito_user_pools(cognito_groups: ["adminClub", "adminSuper"])

  updateClubDevice(input: UpdateClubDeviceInput!): ClubDevice!
    @aws_cognito_user_pools(
      cognito_groups: ["adminClub", "adminSuper", "clubDevice"]
    )

  deleteClubDevice(input: DeleteClubDeviceInput!): ClubDevice!
    @aws_cognito_user_pools(cognito_groups: ["adminClub", "adminSuper"])
  createGame(input: CreateGameInput!): Game!
  @aws_cognito_user_pools(cognito_groups: ["adminClub", "adminSuper"])

  updateGame(input: UpdateGameInput!): Game!
  @aws_cognito_user_pools(
    cognito_groups: ["adminClub", "adminSuper", "clubDevice"]
  )

  deleteGame(input: DeleteGameInput!): Game!
  @aws_cognito_user_pools(cognito_groups: ["adminClub", "adminSuper"])
}

type Subscription {
  onCreateClubDevice(clubId: String!): ClubDevice
    @aws_subscribe(mutations: ["createClubDevice"])
    @aws_cognito_user_pools(cognito_groups: ["adminClub", "adminSuper"])

  onDeleteClubDevice(clubId: String!): ClubDevice
    @aws_subscribe(mutations: ["deleteClubDevice"])
    @aws_cognito_user_pools(cognito_groups: ["adminClub", "adminSuper"])

  onUpdateClubDevice(clubId: String!, clubDeviceId: String): ClubDevice
    @aws_subscribe(mutations: ["updateClubDevice"])
    @aws_cognito_user_pools(
      cognito_groups: ["adminClub", "adminSuper", "clubDevice"]
    )

  onCreateGame(clubId: String!): Game
  @aws_subscribe(mutations: ["createGame"])
  @aws_cognito_user_pools(cognito_groups: ["adminClub", "adminSuper"])

  onDeleteGame(clubId: String!): Game
  @aws_subscribe(mutations: ["deleteGame"])
  @aws_cognito_user_pools(cognito_groups: ["adminClub", "adminSuper"])

  onUpdateGame(clubId: String!, clubDeviceId: String): Game
  @aws_subscribe(mutations: ["updateGame"])
  @aws_cognito_user_pools(
    cognito_groups: ["adminClub", "adminSuper", "clubDevice"]
  )

  onUpdateClub(id: String!): Club
    @aws_subscribe(mutations: ["updateClub"])
    @aws_cognito_user_pools(
      cognito_groups: ["adminClub", "adminSuper", "clubDevice"]
    )
}

type ListClubDevicesOutput {
  items: [ClubDevice]!
  nextToken: String
}

type ListGamesOutput {
  items: [Game]!
  nextToken: String
}

type Club {
  id: String!
  name: String!
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
}

type ClubDevice {
  clubId: String!
  clubDeviceId: String!
  name: String!
  email: AWSEmail!
  table: Int
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
}

input CreateClubDeviceInput {
  clubId: String!
  deviceName: String!
  regToken: String!
}

input UpdateClubDeviceInput {
  clubId: String!
  clubDeviceId: String!
  deviceName: String
  table: Int
}

input UpdateClubInput {
  id: String!
  name: String
}

input DeleteClubDeviceInput {
  clubId: String!
  clubDeviceId: String!
}

type Game {
  clubId: String!
  gameId: String!
  rotation: String!
  tableCount: String!
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
}

input CreateGameInput {
  clubId: String!
  rotation: String!
  tableCount: String!
}

input UpdateGameInput {
  clubId: String!
  gameId: String!
  rotation: String
  tableCount: Int
}

input DeleteGameInput {
  clubId: String!
  gameId: String!
}

type UnexpectedErrorResponse {
  neverGetsReturned: String!
    @aws_cognito_user_pools(cognito_groups: ["adminSuper"])
}

input CreateClubInput {
  newAdminEmail: AWSEmail!
  newClubName: String!
  suppressInvitationEmail: Boolean
  recaptchaToken: String!
}

type CreateClubResponse {
  userId: String!
    @aws_api_key
    @aws_cognito_user_pools(cognito_groups: ["adminSuper"])
  clubId: String!
    @aws_api_key
    @aws_cognito_user_pools(cognito_groups: ["adminSuper"])
}

input DeleteClubAndAdminInput {
  userId: String!
  clubId: String!
}

type DeleteClubAndAdminResponse {
  status: String!
}

# How to do paginated lists:
#type ProfilesPage {
#  profiles: [IProfile!]
#  nextToken: String
#}

schema {
  query: Query
  mutation: Mutation
  subscription: Subscription
}

enum DirectionLetter {
  N
  S
  E
  W
}

enum Strain {
  C
  D
  H
  S
  NT
}

enum Suit {
  C
  D
  H
  S
}

enum Doubling {
  NONE
  DOUBLE
  REDOUBLE
}

type Query {
  getClub(clubId: String!): Club
    @aws_cognito_user_pools(
      cognito_groups: ["adminClub", "adminSuper", "clubDevice"]
    )

  getClubWithCurrentGame(clubId: String!): ClubWithCurrentGame
    @aws_cognito_user_pools(
      cognito_groups: ["adminClub", "adminSuper", "clubDevice"]
    )

  # Generally, only getClub should be needed...
  listClubDevices(
    clubId: String!
    nextToken: String
    limit: Int = 50
  ): ListClubDevicesOutput!
    @aws_cognito_user_pools(cognito_groups: ["adminClub", "adminSuper"])

  listGames(
    clubId: String!
    nextToken: String
    limit: Int = 50
    finalGameFromLastList: PartialGame
  ): ListGamesOutput!
    @aws_cognito_user_pools(cognito_groups: ["adminClub", "adminSuper"])

  getGame(clubId: String!, gameId: String!): Game
    @aws_cognito_user_pools(
      cognito_groups: ["adminClub", "adminSuper", "clubDevice"]
    )
}
type Mutation {
  unexpectedError: UnexpectedErrorResponse!
    @aws_cognito_user_pools(cognito_groups: ["adminSuper"])

  # TODO: get rid of these input types; args types are auto-generated by codegen-gql-types
  createClub(input: CreateClubInput!): CreateClubResponse!
    @aws_api_key
    @aws_cognito_user_pools(cognito_groups: ["adminSuper"])
  updateClubName(clubId: String!, newName: String!): UpdateClubNameResponse!
    @aws_cognito_user_pools(cognito_groups: ["adminSuper", "adminClub"])
  updateCurrentGameId(
    clubId: String!
    newGameId: String!
  ): UpdateCurrentGameIdResponse!
    @aws_cognito_user_pools(cognito_groups: ["adminSuper", "adminClub"])
  deleteClubAndAdmin(
    input: DeleteClubAndAdminInput!
  ): DeleteClubAndAdminResponse!
    @aws_cognito_user_pools(cognito_groups: ["adminClub", "adminSuper"])

  createClubDevice(input: CreateClubDeviceInput!): ClubDevice!
    @aws_cognito_user_pools(cognito_groups: ["adminClub", "adminSuper"])
  deleteClubDevice(input: DeleteClubDeviceInput!): ClubDevice!
    @aws_cognito_user_pools(cognito_groups: ["adminClub", "adminSuper"])

  createGame(input: CreateGameInput!): Game!
    @aws_cognito_user_pools(cognito_groups: ["adminClub", "adminSuper"])
  deleteGame(input: DeleteGameInput!): Game!
    @aws_cognito_user_pools(cognito_groups: ["adminClub", "adminSuper"])

  assignTable(
    clubId: String!
    clubDeviceId: String!
    gameId: String!
    tableNumber: Int! # TODO: rename TableAssignmentResult to AssignTableResponse for consistency
  ): TableAssignmentResult!
    @aws_cognito_user_pools(
      cognito_groups: ["adminSuper", "adminClub", "clubDevice"]
    )

  unassignTable(
    clubId: String!
    clubDeviceId: String!
    gameId: String!
    tableNumber: Int! # TODO: scour for other reusable types like this one:
  ): TableAssignmentResult!
    @aws_cognito_user_pools(
      cognito_groups: ["adminSuper", "adminClub", "clubDevice"]
    )

  assignPlayer(
    clubId: String!
    clubDeviceId: String!
    gameId: String!
    tableNumber: Int!
    directionLetter: DirectionLetter!
    playerId: String!
    playerDisplayName: String!
  ): AssignPlayerResponse!
    @aws_cognito_user_pools(
      cognito_groups: ["adminSuper", "adminClub", "clubDevice"]
    )

  changeRound(
    clubId: String!
    clubDeviceId: String!
    gameId: String!
    tableNumber: Int!
    round: Int!
  ): ChangeRoundResponse
    @aws_cognito_user_pools(
      cognito_groups: ["adminSuper", "clubDevice"]
    )

  assignContract(
    clubId: String!
    clubDeviceId: String!
    gameId: String!
    tableNumber: Int!
    board: Int!
    level: Int!
    strain: Strain!
    declarer: DirectionLetter!
    doubling: Doubling!
    leadSuit: Suit!
    leadRank: String!
  ): AssignContractResponse
    @aws_cognito_user_pools(
      cognito_groups: ["adminSuper", "clubDevice"]
    )

  assignResult(
    clubId: String!
    clubDeviceId: String!
    gameId: String!
    tableNumber: Int!
    board: Int!
    result: Int!
  ): AssignResultResponse
    @aws_cognito_user_pools(
      cognito_groups: ["adminSuper", "clubDevice"]
    )
}

type Subscription {
  # These next four are for web-to-device subscriptions to know when a device's current
  # game has been updated (automatically on create, and to null on delete)
  onCreateGame(clubId: String!): Game
    @aws_subscribe(mutations: ["createGame"])
    @aws_cognito_user_pools(cognito_groups: ["adminSuper", "clubDevice"])
  onDeleteGame(clubId: String!): Game
    @aws_subscribe(mutations: ["deleteGame"])
    @aws_cognito_user_pools(cognito_groups: ["adminSuper", "clubDevice"])
  onUpdateCurrentGameId(clubId: String!): UpdateCurrentGameIdResponse
    @aws_subscribe(mutations: ["updateCurrentGameId"])
    @aws_cognito_user_pools(cognito_groups: ["adminSuper", "clubDevice"])
  onUpdateClubName(clubId: String!): UpdateClubNameResponse
    @aws_subscribe(mutations: ["updateClubName"])
    @aws_cognito_user_pools(cognito_groups: ["adminSuper", "clubDevice"])

  onAssignTable(clubId: String!): TableAssignmentResult
    @aws_subscribe(mutations: ["assignTable"])
    @aws_cognito_user_pools(
      cognito_groups: ["adminSuper", "adminClub", "clubDevice"]
    )
  onUnassignTable(clubId: String!): TableAssignmentResult
    @aws_subscribe(mutations: ["unassignTable"])
    @aws_cognito_user_pools(
      cognito_groups: ["adminSuper", "adminClub", "clubDevice"]
    )

  onAssignPlayer(clubId: String!): AssignPlayerResponse
    @aws_subscribe(mutations: ["assignPlayer"])
    @aws_cognito_user_pools(
      cognito_groups: ["adminSuper", "adminClub", "clubDevice"]
    )
}

type ListClubDevicesOutput {
  items: [ClubDevice]!
  nextToken: String
}

type ListGamesOutput {
  items: [Game]!
  nextToken: String
}

type Club {
  id: String!
  name: String!
  clubDevices: [ClubDevice!]!
  games: [Game!]!
  currentGameId: String
  createdAt: AWSDateTime!
}

type ClubWithCurrentGame {
  id: String!
  name: String!
  currentGame: Game
  createdAt: AWSDateTime!
}

type ClubDevice {
  clubId: String!
  clubDeviceId: String!
  name: String!
  email: AWSEmail!
  createdAt: AWSDateTime!
}

input CreateClubDeviceInput {
  clubId: String!
  deviceName: String!
  regToken: String!
}

input DeleteClubDeviceInput {
  clubId: String!
  clubDeviceId: String!
}

type PlayerAssignment {
  directionLetter: DirectionLetter!
  playerId: String!
  playerDisplayName: String!
}

type BoardResult {
  tableNumber: Int!
  board: Int!
  level: Int!
  strain: Strain!
  doubling: Doubling!
  declarer: DirectionLetter!
  leadRank: String!
  leadSuit: Suit!
  result: Int
}

type TableAssignment {
  tableNumber: Int!
  clubDeviceId: String!
  playerAssignments: [PlayerAssignment!]!
  round: Int
  results: [BoardResult!]!
}

input PartialTableAssignment {
  tableNumber: Int!
  clubDeviceId: String!
  playerAssignments: [PartialPlayerAssignment!]!
}

input PartialPlayerAssignment {
  directionLetter: DirectionLetter!
  playerId: String!
  playerDisplayName: String!
}

type TableAssignmentResult {
  clubId: String!
  clubDeviceId: String!
  gameId: String!
  tableNumber: Int!
}

type AssignPlayerResponse {
  clubId: String!
  clubDeviceId: String!
  gameId: String!
  tableNumber: Int!
  directionLetter: DirectionLetter!
  playerId: String!
  playerDisplayName: String!
}

type Game {
  clubId: String!
  gameId: String!
  movement: String!
  tableCount: Int!
  roundCount: Int!
  boardsPerRound: Int!
  label: String
  tableAssignments: [TableAssignment!]!
  createdAt: AWSDateTime!
}

input PartialGame {
  clubId: String!
  gameId: String!
  movement: String!
  tableCount: Int!
  roundCount: Int!
  boardsPerRound: Int!
  label: String
  tableAssignments: [PartialTableAssignment!]!
  createdAt: AWSDateTime!
}

input CreateGameInput {
  clubId: String!
  movement: String!
  tableCount: Int!
  roundCount: Int!
  boardsPerRound: Int!
  label: String
}

input DeleteGameInput {
  clubId: String!
  gameId: String!
}

type UnexpectedErrorResponse {
  neverGetsReturned: String!
    @aws_cognito_user_pools(cognito_groups: ["adminSuper"])
}

input CreateClubInput {
  newAdminEmail: AWSEmail!
  newClubName: String!
  suppressInvitationEmail: Boolean
  recaptchaToken: String!
}

type CreateClubResponse {
  userId: String!
    @aws_api_key
    @aws_cognito_user_pools(cognito_groups: ["adminSuper"])
  clubId: String!
    @aws_api_key
    @aws_cognito_user_pools(cognito_groups: ["adminSuper"])
}

type UpdateClubNameResponse {
  clubId: String!
  newClubName: String!
}

type UpdateCurrentGameIdResponse {
  clubId: String!
  newCurrentGameId: String!
}

type ClearCurrentGameIdResponse {
  clubId: String!
}

input DeleteClubAndAdminInput {
  userId: String!
  clubId: String!
}

type DeleteClubAndAdminResponse {
  status: String!
}

type ChangeRoundResponse {
  clubId: String!
  clubDeviceId: String!
  gameId: String!
  tableNumber: Int!
  round: Int!
}

type AssignContractResponse {
  clubId: String!
  clubDeviceId: String!
  gameId: String!
  tableNumber: Int!
  board: Int!
  level: Int!
  strain: Strain!
  declarer: DirectionLetter!
  doubling: Doubling!
  leadSuit: Suit!
  leadRank: String!
}

type AssignResultResponse {
  clubId: String!
  clubDeviceId: String!
  gameId: String!
  tableNumber: Int!
  result: Int!
}
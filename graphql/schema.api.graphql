# OK I wanna redo the way this works, to accommodate growth without the need for paging
# I want it to look like this, for absolute minimum
# A C ClubItem
# A   Game1Table1DetailedResults as a list
# A   Game1Table2DetailedResults
# A B Game1GeneralResults
# A B Game1Table1TableAssignment, playerAssignments as a list, results bitmap
# A B Game1Table2TableAssignment, playerAssignments as a list, results bitmap
# A   Game2Table1DetailedResults as a list
# A   Game2Table2DetailedResults as a list
# A D Game2GeneralResults
# A D Game2Table1PlayerAssignments as a list & TableAssignments as a list & results bitmap
# A D Game2Table2PlayerAssignments as a list & TableAssignments as a list & results bitmap
#
# Webapp will be most likely to need to page for A+C
# Devices will be at minimum, writing some A records but only reading B/D records
# This comes at the cost of a single extra pipeline fn to grab C alongside the B/D's
# Only webapp writes to Game1GeneralResults
# Only table1's device writes its assignment, playerAssignments, results bitmap
# Only table2's device " etc.
# This means table-specific data will not survive table reassignment. That's OK.
schema {
  query: Query
  mutation: Mutation
  subscription: Subscription
}

enum DirectionLetter {
  N
  S
  E
  W
}

enum Strain {
  C
  D
  H
  S
  NT
}

enum Suit {
  C
  D
  H
  S
}

enum Rank {
  ACE
  TWO
  THREE
  FOUR
  FIVE
  SIX
  SEVEN
  EIGHT
  NINE
  TEN
  JACK
  QUEEN
  KING
}

enum Doubling {
  NONE
  DOUBLE
  REDOUBLE
}

enum BoardResultType {
  PLAYED
  PASSED_OUT
  NOT_BID_NOT_PLAYED
}

type Query {
  # toward slimming the data fetch: this only needs
  # A) clubItem details,
  # B) clubDevice details,
  # C) high-level game details
  # does not need table assignments, player assignments, or results
  getClub(clubId: String!): Club
    @aws_cognito_user_pools(
      cognito_groups: ["adminClub", "adminSuper", "clubDevice"]
    )

  # this is far more frequent, more bang for optimization buck, needs:
  # A) clubItem details,
  # B) Game details up to table/player assignments and a bitmap for results: boards done for this table
  getClubWithCurrentGame(clubId: String!): ClubWithCurrentGame
    @aws_cognito_user_pools(
      cognito_groups: ["adminClub", "adminSuper", "clubDevice"]
    )

  # This can probably be deleted
  listClubDevices(
    clubId: String!
    nextToken: String
    limit: Int = 50
  ): ListClubDevicesOutput!
    @aws_cognito_user_pools(cognito_groups: ["adminClub", "adminSuper"])

  # This can probably be deleted, except that it has the tooling for nextToken
  listGames(
    clubId: String!
    nextToken: String
    limit: Int = 50
    finalGameFromLastList: PartialGame
  ): ListGamesOutput!
    @aws_cognito_user_pools(cognito_groups: ["adminClub", "adminSuper"])

  # This is the one that webapp will use to get everything about a game, including detailed results
  # device also uses this when currentGame changes, but should only need tables, players, and the
  # results bitmap, not full results
  # It would be good to learn how to return auth errors only for detailed game results and not
  # for the bitmap when a device requests the detailed results
  getGame(clubId: String!, gameId: String!): Game
    @aws_cognito_user_pools(
      cognito_groups: ["adminClub", "adminSuper", "clubDevice"]
    )
}
type Mutation {
  unexpectedError: UnexpectedErrorResponse!
    @aws_cognito_user_pools(cognito_groups: ["adminSuper"])

  # TODO: get rid of these input types; args types are auto-generated by codegen-gql-types
  createClub(input: CreateClubInput!): CreateClubResponse!
    @aws_api_key
    @aws_cognito_user_pools(cognito_groups: ["adminSuper"])
  updateClubName(clubId: String!, newName: String!): UpdateClubNameResponse!
    @aws_cognito_user_pools(cognito_groups: ["adminSuper", "adminClub"])
  updateCurrentGameId(
    clubId: String!
    newGameId: String!
  ): UpdateCurrentGameIdResponse!
    @aws_cognito_user_pools(cognito_groups: ["adminSuper", "adminClub"])
  deleteClubAndAdmin(
    input: DeleteClubAndAdminInput!
  ): DeleteClubAndAdminResponse!
    @aws_cognito_user_pools(cognito_groups: ["adminClub", "adminSuper"])

  createClubDevice(input: CreateClubDeviceInput!): ClubDevice!
    @aws_cognito_user_pools(cognito_groups: ["adminClub", "adminSuper"])
  deleteClubDevice(input: DeleteClubDeviceInput!): ClubDevice!
    @aws_cognito_user_pools(cognito_groups: ["adminClub", "adminSuper"])

  createGame(input: CreateGameInput!): Game!
    @aws_cognito_user_pools(cognito_groups: ["adminClub", "adminSuper"])
  deleteGame(input: DeleteGameInput!): Game!
    @aws_cognito_user_pools(cognito_groups: ["adminClub", "adminSuper"])

  assignTable(
    clubId: String!
    clubDeviceId: String!
    gameId: String!
    tableNumber: Int! # TODO: rename TableAssignmentResult to AssignTableResponse for consistency
  ): TableAssignmentResult!
    @aws_cognito_user_pools(
      cognito_groups: ["adminSuper", "adminClub", "clubDevice"]
    )

  unassignTable(
    clubId: String!
    clubDeviceId: String!
    gameId: String!
    tableNumber: Int!
  ): TableUnassignmentResult!
    @aws_cognito_user_pools(
      cognito_groups: ["adminSuper", "adminClub", "clubDevice"]
    )

  assignPlayer(
    clubId: String!
    clubDeviceId: String!
    gameId: String!
    tableNumber: Int!
    directionLetter: DirectionLetter!
    playerId: String!
    playerDisplayName: String!
  ): AssignPlayerResponse!
    @aws_cognito_user_pools(
      cognito_groups: ["adminSuper", "adminClub", "clubDevice"]
    )

  changeBoard(
    clubId: String!
    clubDeviceId: String!
    gameId: String!
    tableNumber: Int!
    board: Int
    round: Int
  ): ChangeBoardResponse
    @aws_cognito_user_pools(cognito_groups: ["adminSuper", "clubDevice"])

  assignContract(
    clubId: String!
    clubDeviceId: String!
    gameId: String!
    tableNumber: Int!
    board: Int!
    level: Int!
    strain: Strain!
    declarer: DirectionLetter!
    doubling: Doubling!
    leadSuit: Suit!
    leadRank: Rank!
  ): AssignContractResponse
    @aws_cognito_user_pools(cognito_groups: ["adminSuper", "clubDevice"])

  assignResult(
    clubId: String!
    clubDeviceId: String!
    gameId: String!
    tableNumber: Int!
    board: Int!
    type: BoardResultType!
    result: Int
  ): AssignResultResponse
    @aws_cognito_user_pools(cognito_groups: ["adminSuper", "clubDevice"])
}

type Subscription {
  # These next three are for webapp-to-device communication to know when a device's current
  # game has been updated (automatically on create, and to null on delete)
  onCreateGame(clubId: String!): Game
    @aws_subscribe(mutations: ["createGame"])
    @aws_cognito_user_pools(cognito_groups: ["adminSuper", "clubDevice"])
  onDeleteGame(clubId: String!): Game
    @aws_subscribe(mutations: ["deleteGame"])
    @aws_cognito_user_pools(cognito_groups: ["adminSuper", "clubDevice"])
  onUpdateCurrentGameId(clubId: String!): UpdateCurrentGameIdResponse
    @aws_subscribe(mutations: ["updateCurrentGameId"])
    @aws_cognito_user_pools(cognito_groups: ["adminSuper", "clubDevice"])

  # This is for webapp-to-device communication to update the club's name
  onUpdateClubName(clubId: String!): UpdateClubNameResponse
    @aws_subscribe(mutations: ["updateClubName"])
    @aws_cognito_user_pools(cognito_groups: ["adminSuper", "clubDevice"])

  # These next two are for device-to-device communication to know which tables
  # are still available for assignment, and when all tables have been assigned
  onAssignTable(clubId: String!): TableAssignmentResult
    @aws_subscribe(mutations: ["assignTable"])
    @aws_cognito_user_pools(
      cognito_groups: ["adminSuper", "adminClub", "clubDevice"]
    )
  onUnassignTable(clubId: String!): TableUnassignmentResult
    @aws_subscribe(mutations: ["unassignTable"])
    @aws_cognito_user_pools(
      cognito_groups: ["adminSuper", "adminClub", "clubDevice"]
    )

  # This is for for device-to-device communication to know player names for display
  # after round 1
  onAssignPlayer(clubId: String!): AssignPlayerResponse
    @aws_subscribe(mutations: ["assignPlayer"])
    @aws_cognito_user_pools(
      cognito_groups: ["adminSuper", "adminClub", "clubDevice"]
    )
}

type ListClubDevicesOutput {
  items: [ClubDevice]!
  nextToken: String
}

type ListGamesOutput {
  items: [Game]!
  nextToken: String
}

type Club {
  id: String!
  name: String!
  clubDevices: [ClubDevice!]!
  games: [Game!]!
  currentGameId: String
  createdAt: AWSDateTime!
}

type ClubWithCurrentGame {
  id: String!
  name: String!
  currentGame: Game
  createdAt: AWSDateTime!
}

type ClubDevice {
  clubId: String!
  clubDeviceId: String!
  name: String!
  email: AWSEmail!
  createdAt: AWSDateTime!
}

input CreateClubDeviceInput {
  clubId: String!
  deviceName: String!
  regToken: String!
}

input DeleteClubDeviceInput {
  clubId: String!
  clubDeviceId: String!
}

type PlayerAssignment {
  directionLetter: DirectionLetter!
  playerId: String!
  playerDisplayName: String!
}

type BoardResult {
  type: BoardResultType
  board: Int
  level: Int
  strain: Strain
  doubling: Doubling
  declarer: DirectionLetter
  leadRank: Rank
  leadSuit: Suit
  result: Int
}

input PartialBoardResult {
  type: BoardResultType
  board: Int
  level: Int
  strain: Strain
  doubling: Doubling
  declarer: DirectionLetter
  leadRank: Rank
  leadSuit: Suit
  result: Int
}
type TableAssignment {
  tableNumber: Int!
  clubDeviceId: String!
  playerAssignments: [PlayerAssignment!]!
  round: Int
  board: Int
  results: [BoardResult!]!
}

input PartialTableAssignment {
  tableNumber: Int!
  clubDeviceId: String!
  playerAssignments: [PartialPlayerAssignment!]!
  round: Int
  board: Int
  results: [PartialBoardResult!]!
}

input PartialPlayerAssignment {
  directionLetter: DirectionLetter!
  playerId: String!
  playerDisplayName: String!
}

type TableAssignmentResult {
  clubId: String!
  clubDeviceId: String!
  gameId: String!
  tableNumber: Int!
  round: Int
  board: Int
  playerAssignments: [PlayerAssignment!]!
  results: [BoardResult!]!
}
type TableUnassignmentResult {
  clubId: String!
  clubDeviceId: String!
  gameId: String!
  tableNumber: Int!
  round: Int
  board: Int
}
type AssignPlayerResponse {
  clubId: String!
  clubDeviceId: String!
  gameId: String!
  tableNumber: Int!
  directionLetter: DirectionLetter!
  playerId: String!
  playerDisplayName: String!
}

type Game {
  clubId: String!
  gameId: String!
  movement: String!
  tableCount: Int!
  roundCount: Int!
  boardsPerRound: Int!
  label: String
  tableAssignments: [TableAssignment!]!
  createdAt: AWSDateTime!
}

input PartialGame {
  clubId: String!
  gameId: String!
  movement: String!
  tableCount: Int!
  roundCount: Int!
  boardsPerRound: Int!
  label: String
  tableAssignments: [PartialTableAssignment!]!
  createdAt: AWSDateTime!
}

input CreateGameInput {
  clubId: String!
  movement: String!
  tableCount: Int!
  roundCount: Int!
  boardsPerRound: Int!
  label: String
}

input DeleteGameInput {
  clubId: String!
  gameId: String!
}

type UnexpectedErrorResponse {
  neverGetsReturned: String!
    @aws_cognito_user_pools(cognito_groups: ["adminSuper"])
}

input CreateClubInput {
  newAdminEmail: AWSEmail!
  newClubName: String!
  suppressInvitationEmail: Boolean
  recaptchaToken: String!
}

type CreateClubResponse {
  userId: String!
    @aws_api_key
    @aws_cognito_user_pools(cognito_groups: ["adminSuper"])
  clubId: String!
    @aws_api_key
    @aws_cognito_user_pools(cognito_groups: ["adminSuper"])
}

type UpdateClubNameResponse {
  clubId: String!
  newClubName: String!
}

type UpdateCurrentGameIdResponse {
  clubId: String!
  newCurrentGameId: String!
}

type ClearCurrentGameIdResponse {
  clubId: String!
}

input DeleteClubAndAdminInput {
  userId: String!
  clubId: String!
}

type DeleteClubAndAdminResponse {
  status: String!
}

type ChangeBoardResponse {
  clubId: String!
  clubDeviceId: String!
  gameId: String!
  tableNumber: Int!
  board: Int
  round: Int
}

type AssignContractResponse {
  clubId: String!
  clubDeviceId: String!
  gameId: String!
  tableNumber: Int!
  board: Int!
  level: Int!
  strain: Strain!
  declarer: DirectionLetter!
  doubling: Doubling!
  leadSuit: Suit!
  leadRank: Rank!
}

type AssignResultResponse {
  clubId: String!
  clubDeviceId: String!
  gameId: String!
  tableNumber: Int!
  type: BoardResultType!
  board: Int!
  result: Int
}

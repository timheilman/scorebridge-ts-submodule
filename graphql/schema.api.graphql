schema {
  query: Query
  mutation: Mutation
  subscription: Subscription
}

enum DirectionLetter {
  N
  S
  E
  W
}

enum Strain {
  C
  D
  H
  S
  NT
}

enum Suit {
  C
  D
  H
  S
}

enum Rank {
  ACE
  TWO
  THREE
  FOUR
  FIVE
  SIX
  SEVEN
  EIGHT
  NINE
  TEN
  JACK
  QUEEN
  KING
}

enum Doubling {
  NONE
  DOUBLE
  REDOUBLE
}

enum BoardResultType {
  NOT_BID_NOT_PLAYED
  PASSED_OUT
  PLAYED
}

enum Movement {
  MITCHELL
  HOWELL
  RAINBOW
}

type Query {
  getClub(clubId: String!): Club
    @aws_cognito_user_pools(
      cognito_groups: ["adminClub", "adminSuper", "clubDevice"]
    )

  # These input arguments eliminate repetitive gql mutation strings that must list arguments twice
  listClubDeviceRegistrations(
    input: ListClubDeviceRegistrationsInput!
  ): ListClubDeviceRegistrationsOutput!
    @aws_cognito_user_pools(cognito_groups: ["adminClub", "adminSuper"])

  listClubDevices(input: ListClubDevicesInput!): ListClubDevicesOutput!
    @aws_cognito_user_pools(cognito_groups: ["adminClub", "adminSuper"])

  listGames(input: ListGamesInput!): ListGamesOutput!
    @aws_cognito_user_pools(cognito_groups: ["adminClub", "adminSuper"])

  getGame(input: GetGameInput!): Game
    @aws_cognito_user_pools(
      cognito_groups: ["adminClub", "adminSuper", "clubDevice"]
    )

  listPlayers(input: ListPlayersInput!): ListPlayersOutput!
    @aws_cognito_user_pools(
      cognito_groups: ["adminClub", "adminSuper", "clubDevice"]
    )
}

type Mutation {
  unexpectedError: UnexpectedErrorResponse!
    @aws_cognito_user_pools(cognito_groups: ["adminSuper"])

  createClub(input: CreateClubInput!): CreateClubResponse!
    @aws_api_key
    @aws_cognito_user_pools(cognito_groups: ["adminSuper"])
  updateClubName(input: UpdateClubNameInput!): UpdateClubNameResponse!
    @aws_cognito_user_pools(cognito_groups: ["adminSuper", "adminClub"])
  updateCurrentGameId(
    input: UpdateCurrentGameIdInput!
  ): UpdateCurrentGameIdResponse!
    @aws_cognito_user_pools(cognito_groups: ["adminSuper", "adminClub"])
  deleteClubAndAdmin(
    input: DeleteClubAndAdminInput!
  ): DeleteClubAndAdminResponse!
    @aws_cognito_user_pools(cognito_groups: ["adminClub", "adminSuper"])

  createClubDeviceRegistration(
    input: CreateClubDeviceRegistrationInput!
  ): ClubDeviceRegistration!
    @aws_cognito_user_pools(cognito_groups: ["adminClub", "adminSuper"])
  notifyClubDeviceCreated(input: ClubDeviceCreated!): ClubDeviceWithRegToken!
    @aws_cognito_user_pools(cognito_groups: ["adminSuper"])
    @aws_iam
  enqueueClubDeviceDeletion(
    input: EnqueueClubDeviceDeletionInput!
  ): ClubDevice!
    @aws_cognito_user_pools(cognito_groups: ["adminClub", "adminSuper"])
  notifyClubDeviceDeleted(
    input: EnqueueClubDeviceDeletionInput!
  ): EnqueueClubDeviceDeletionOutput!
    @aws_cognito_user_pools(cognito_groups: ["adminSuper"])
    @aws_iam

  createGame(input: CreateGameInput!): Game!
    @aws_cognito_user_pools(cognito_groups: ["adminClub", "adminSuper"])
  deleteGame(input: DeleteGameInput!): Game!
    @aws_cognito_user_pools(cognito_groups: ["adminClub", "adminSuper"])

  updateTableAssignment(
    input: UpdateTableAssignmentInput!
  ): UpdateTableAssignmentResponse!
    @aws_cognito_user_pools(
      cognito_groups: ["adminSuper", "adminClub", "clubDevice"]
    )

  assignPlayer(input: AssignPlayerInput!): AssignPlayerResponse!
    @aws_cognito_user_pools(
      cognito_groups: ["adminSuper", "adminClub", "clubDevice"]
    )

  unassignPlayers(input: UnassignPlayersInput!): UnassignPlayersResponse!
    @aws_cognito_user_pools(
      cognito_groups: ["adminSuper", "adminClub", "clubDevice"]
    )

  updateBoardResult(input: UpdateBoardResultInput!): UpdateBoardResultResponse!
    @aws_cognito_user_pools(
      cognito_groups: ["adminSuper", "adminClub", "clubDevice"]
    )

  createPlayer(input: CreatePlayerInput!): Player!
    @aws_cognito_user_pools(cognito_groups: ["adminClub", "adminSuper"])
  updatePlayer(input: UpdatePlayerInput!): Player!
    @aws_cognito_user_pools(cognito_groups: ["adminClub", "adminSuper"])
  deletePlayer(input: DeletePlayerInput!): Player!
    @aws_cognito_user_pools(cognito_groups: ["adminClub", "adminSuper"])
}

type Subscription {
  # These next three are for webapp-to-device communication to know when a device's current
  # game has been updated (automatically on create, and to null on delete)
  onCreateGame(clubId: String!): Game
    @aws_subscribe(mutations: ["createGame"])
    @aws_cognito_user_pools(cognito_groups: ["adminSuper", "clubDevice"])
  onDeleteGame(clubId: String!): Game
    @aws_subscribe(mutations: ["deleteGame"])
    @aws_cognito_user_pools(cognito_groups: ["adminSuper", "clubDevice"])
  onUpdateCurrentGameId(clubId: String!): UpdateCurrentGameIdResponse
    @aws_subscribe(mutations: ["updateCurrentGameId"])
    @aws_cognito_user_pools(cognito_groups: ["adminSuper", "clubDevice"])

  # This is for webapp-to-device communication to update the club's name
  onUpdateClubName(clubId: String!): UpdateClubNameResponse
    @aws_subscribe(mutations: ["updateClubName"])
    @aws_cognito_user_pools(cognito_groups: ["adminSuper", "clubDevice"])

  # This is for for device-to-device communication to know player names for display
  # after round 1
  onAssignPlayer(clubId: String!): AssignPlayerResponse
    @aws_subscribe(mutations: ["assignPlayer"])
    @aws_cognito_user_pools(
      cognito_groups: ["adminSuper", "adminClub", "clubDevice"]
    )
  onUnassignPlayers(clubId: String!): UnassignPlayersResponse
    @aws_subscribe(mutations: ["unassignPlayers"])
    @aws_cognito_user_pools(
      cognito_groups: ["adminSuper", "adminClub", "clubDevice"]
    )

  onUpdateTableAssignment(clubId: String!): UpdateTableAssignmentResponse
    @aws_subscribe(mutations: ["updateTableAssignment"])
    @aws_cognito_user_pools(
      cognito_groups: ["adminSuper", "adminClub", "clubDevice"]
    )

  onUpdateBoardResult(clubId: String!): UpdateBoardResultResponse
    @aws_subscribe(mutations: ["updateBoardResult"])
    @aws_cognito_user_pools(
      cognito_groups: ["adminSuper", "adminClub", "clubDevice"]
    )

  onCreatePlayer(clubId: String!): Player
    @aws_subscribe(mutations: ["createPlayer"])
    @aws_cognito_user_pools(cognito_groups: ["adminSuper", "clubDevice"])
  onUpdatePlayer(clubId: String!): Player
    @aws_subscribe(mutations: ["updatePlayer"])
    @aws_cognito_user_pools(cognito_groups: ["adminSuper", "clubDevice"])
  onDeletePlayer(clubId: String!): Player
    @aws_subscribe(mutations: ["deletePlayer"])
    @aws_cognito_user_pools(cognito_groups: ["adminSuper", "clubDevice"])

  onNotifyClubDeviceCreated(clubId: String!): ClubDeviceWithRegToken
    @aws_subscribe(mutations: ["notifyClubDeviceCreated"])
    @aws_cognito_user_pools(cognito_groups: ["adminSuper", "adminClub"])
  onNotifyClubDeviceDeleted(clubId: String!): EnqueueClubDeviceDeletionOutput
    @aws_subscribe(mutations: ["notifyClubDeviceDeleted"])
    @aws_cognito_user_pools(cognito_groups: ["adminSuper", "adminClub"])
}

input ListClubDevicesInput {
  clubId: String!
  nextToken: String
  limit: Int
}

input ListClubDeviceRegistrationsInput {
  clubId: String!
  nextToken: String
  limit: Int
}

type ListClubDevicesOutput {
  items: [ClubDevice]!
  nextToken: String
}

type ListClubDeviceRegistrationsOutput {
  items: [ClubDeviceRegistration]!
  nextToken: String
}

input ListGamesInput {
  clubId: String!
  nextToken: String
  limit: Int
  finalGameFromLastList: PartialGame
}

input ListPlayersInput {
  clubId: String!
  nextToken: String
  limit: Int
}

type ListGamesOutput {
  items: [Game]!
  nextToken: String
}

type ListPlayersOutput {
  items: [Player]!
  nextToken: String
}

type Club {
  id: String!
  name: String!
  currentGameId: String
  createdAt: AWSDateTime!
}

type ClubDevice {
  clubId: String!
  clubDeviceId: String!
  name: String!
  email: AWSEmail!
  createdAt: AWSDateTime!
}

type ClubDeviceWithRegToken {
  clubId: String!
    @aws_iam
    @aws_cognito_user_pools(cognito_groups: ["adminSuper", "adminClub"])
  clubDeviceId: String!
    @aws_iam
    @aws_cognito_user_pools(cognito_groups: ["adminSuper", "adminClub"])
  name: String!
    @aws_iam
    @aws_cognito_user_pools(cognito_groups: ["adminSuper", "adminClub"])
  email: AWSEmail!
    @aws_iam
    @aws_cognito_user_pools(cognito_groups: ["adminSuper", "adminClub"])
  createdAt: AWSDateTime!
    @aws_iam
    @aws_cognito_user_pools(cognito_groups: ["adminSuper", "adminClub"])
  regToken: String!
    @aws_iam
    @aws_cognito_user_pools(cognito_groups: ["adminSuper", "adminClub"])
}

input ClubDeviceCreated {
  clubId: String!
  clubDeviceId: String!
  name: String!
  email: AWSEmail!
  createdAt: AWSDateTime!
  regToken: String!
}

type ClubDeviceRegistration {
  # The clubId stored in ddb is the constant string "clubDeviceRegistration"
  # This field is what is stored in ddb as "realClubId"
  clubId: String!
  deviceName: String!
  ttl: Int!
  # This is stored in ddb as the sortKey; "regToken" does not appear in ddb
  regToken: String!
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
}

input CreateClubDeviceRegistrationInput {
  clubId: String!
  deviceName: String!
  regToken: String!
}

input EnqueueClubDeviceDeletionInput {
  clubId: String!
  clubDeviceId: String!
}

type EnqueueClubDeviceDeletionOutput {
  clubId: String!
    @aws_api_key
    @aws_cognito_user_pools(cognito_groups: ["adminSuper"])
  clubDeviceId: String!
    @aws_api_key
    @aws_cognito_user_pools(cognito_groups: ["adminSuper"])
}

type PlayerAssignment {
  directionLetter: DirectionLetter!
  playerId: String!
  playerDisplayName: String!
}

# https://docs.google.com/spreadsheets/d/1fotK1vf9V7WYQfU_0_dcIdM79r2DtKcGE9QwbEcJ9sw/edit?gid=0#gid=0
type BoardResultC {
  type: BoardResultType!
  board: Int!
  round: Int!
  currentAsOf: AWSDateTime!
  level: Int
  strain: Strain
  doubling: Doubling
  declarer: DirectionLetter
  leadRank: Rank
  leadSuit: Suit
  wonTrickCount: Int
  confirmed: Boolean!
}

input PagingBoardResultC {
  type: BoardResultType!
  board: Int!
  round: Int!
  currentAsOf: AWSDateTime!
  level: Int
  strain: Strain
  doubling: Doubling
  declarer: DirectionLetter
  leadRank: Rank
  leadSuit: Suit
  wonTrickCount: Int
  confirmed: Boolean!
}

# https://docs.google.com/spreadsheets/d/1fotK1vf9V7WYQfU_0_dcIdM79r2DtKcGE9QwbEcJ9sw/edit?gid=0#gid=0
input BoardResult {
  type: BoardResultType!
  board: Int!
  round: Int!
  level: Int
  strain: Strain
  doubling: Doubling
  declarer: DirectionLetter
  leadRank: Rank
  leadSuit: Suit
  wonTrickCount: Int
  confirmed: Boolean!
}

input UpdateBoardResultInput {
  clubId: String!
  gameId: String!
  tableNumber: Int!
  boardResult: BoardResult!
}

type TableAssignmentCVT {
  tableNumber: Int!
  currentAsOf: AWSDateTime!
  clubDeviceId: String
  confirmed: Boolean!
  round: Int!
  roundWelcomeConfirmed: Boolean!
  playerAssignments: [PlayerAssignment!]!
  results: [BoardResultC!]!
}

input TableAssignment {
  tableNumber: Int!
  clubDeviceId: String
  clearClubDeviceId: Boolean!
  confirmed: Boolean
  round: Int
  roundWelcomeConfirmed: Boolean
}

input PagingTableAssignmentCVT {
  tableNumber: Int!
  currentAsOf: AWSDateTime!
  clubDeviceId: String
  confirmed: Boolean!
  round: Int!
  roundWelcomeConfirmed: Boolean!
  playerAssignments: [PartialPlayerAssignment!]!
  results: [PagingBoardResultC!]!
}

input UpdateTableAssignmentInput {
  clubId: String!
  gameId: String!
  tableAssignment: TableAssignment!
}

input PartialPlayerAssignment {
  directionLetter: DirectionLetter!
  playerId: String!
  playerDisplayName: String!
}

input AssignPlayerInput {
  clubId: String!
  clubDeviceId: String
  gameId: String!
  tableNumber: Int!
  directionLetter: DirectionLetter!
  playerId: String!
  playerDisplayName: String!
}

input UnassignPlayersInput {
  clubId: String!
  clubDeviceId: String
  gameId: String!
  tableNumber: Int!
}

type AssignPlayerResponse {
  clubId: String!
  clubDeviceId: String
  gameId: String!
  tableNumber: Int!
  directionLetter: DirectionLetter!
  playerId: String!
  playerDisplayName: String!
}

type UnassignPlayersResponse {
  clubId: String!
  clubDeviceId: String
  gameId: String!
  tableNumber: Int!
}

input GetGameInput {
  clubId: String!
  gameId: String!
}

type Game {
  clubId: String!
  gameId: String!
  movement: Movement!
  tableCount: Int!
  roundCount: Int!
  boardsPerRound: Int!
  label: String
  tableAssignments: [TableAssignmentCVT!]!
  createdAt: AWSDateTime!
}

type Player {
  clubId: String!
  playerId: String!
  playerDisplayName: String!
}

input PartialGame {
  clubId: String!
  gameId: String!
  movement: Movement!
  tableCount: Int!
  roundCount: Int!
  boardsPerRound: Int!
  label: String
  tableAssignments: [PagingTableAssignmentCVT!]!
  createdAt: AWSDateTime!
}

input CreateGameInput {
  clubId: String!
  movement: Movement!
  tableCount: Int!
  roundCount: Int!
  boardsPerRound: Int!
  label: String
}

input CreatePlayerInput {
  clubId: String!
  playerId: String
  playerDisplayName: String!
}

input DeleteGameInput {
  clubId: String!
  gameId: String!
}

input DeletePlayerInput {
  clubId: String!
  playerId: String!
}

input UpdatePlayerInput {
  clubId: String!
  playerId: String!
  playerDisplayName: String!
}

type UnexpectedErrorResponse {
  neverGetsReturned: String!
    @aws_cognito_user_pools(cognito_groups: ["adminSuper"])
}

input CreateClubInput {
  newAdminEmail: AWSEmail!
  newClubName: String!
  suppressInvitationEmail: Boolean
  recaptchaToken: String!
}

type CreateClubResponse {
  userId: String!
    @aws_api_key
    @aws_cognito_user_pools(cognito_groups: ["adminSuper"])
  clubId: String!
    @aws_api_key
    @aws_cognito_user_pools(cognito_groups: ["adminSuper"])
}

input UpdateClubNameInput {
  clubId: String!
  newName: String!
}

type UpdateClubNameResponse {
  clubId: String!
  newClubName: String!
}

input UpdateCurrentGameIdInput {
  clubId: String!
  newGameId: String
}

type UpdateCurrentGameIdResponse {
  clubId: String!
  newCurrentGameId: String
}

type ClearCurrentGameIdResponse {
  clubId: String!
}

input DeleteClubAndAdminInput {
  userId: String!
  clubId: String!
}

type DeleteClubAndAdminResponse {
  status: String!
}

type UpdateTableAssignmentResponse {
  clubId: String!
  gameId: String!
  clientId: String!
  tableAssignment: TableAssignmentCVT!
}

type UpdateBoardResultResponse {
  clubId: String!
  gameId: String!
  tableNumber: Int!
  clientId: String!
  boardResult: BoardResultC!
}
